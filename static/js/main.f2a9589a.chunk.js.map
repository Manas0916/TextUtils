{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","react_default","a","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aria-checked","style","cursor","onClick","toggleMode","role","htmlFor","defaultProps","about","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","color","heading","index_esm","clientId","value","backgroundColor","onChange","event","target","rows","disabled","length","showAlert","newText","toUpperCase","toLowerCase","split","map","w","substring","join","s","i","n","charAt","navigator","clipboard","writeText","filter","ele","Alert","height","alert","word","lower","slice","capitalize","msg","App","setMode","_useState3","_useState4","setalert","message","setTimeout","document","body","components_Alert","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f2a9589a.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n// import { Link } from 'react-router-dom';\n\nexport default function Navbar(props) {\n  return (\n    <nav className={`navbar navbar-expand-lg bg-${props.mode} navbar-${props.mode}`}>\n        <div className=\"container-fluid\">\n            <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n            </button>\n            <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav-link \" aria-current=\"page\" href=\"#\">Home</a>\n                    </li>\n                    {/* <li className=\"nav-item\">\n                        <Link className=\"nav-link\" to={\"/about\"}>{props.about}</Link>\n                    </li> */}\n                </ul>\n                <div className={`form-check form-switch text-${props.mode === 'light'?'dark':'light'}`}>\n                    <input className=\"form-check-input\" aria-checked = 'false' style ={{cursor: 'pointer'}} onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\n                    <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Dark Mode</label>\n                </div>\n            </div>\n        </div>\n    </nav>\n  );\n}\nNavbar.propTypes = {\n    title: PropTypes.string.isRequired,\n    about: PropTypes.string.isRequired\n}\nNavbar.defaultProps = {\n    title: 'Set title here',\n    about: 'About'\n}\n\n","import React, { useState } from \"react\";\nimport { GrammarlyEditorPlugin } from '@grammarly/editor-sdk-react'\n\nexport default function TextForm(props) {\n    const handleUpClick = () =>{\n        // console.log(\"Upper Case was clicked\");\n        let newText = text.toUpperCase();\n        setText(newText);\n        props.showAlert('Converted to UpperCase', \"success\");\n    }\n    const handleLoClick = () =>{\n        // console.log(\"Lower Case was clicked\");\n        let newText = text.toLowerCase();\n        setText(newText);\n        props.showAlert('Converted to LowerCase', \"success\");\n    }\n    const handleClearClick = () =>{\n        setText(\"\");\n        props.showAlert('Cleared Successfully', \"success\");\n    }\n    const handleStartClick = () =>{\n        if(text.length !== 0){\n            let newText = text.split(' ').map(w => w[0].toUpperCase() + w.substring(1).toLowerCase()).join(' ');\n            setText(newText);\n        }\n        props.showAlert('Converted to StartCase', \"success\");\n\n    }\n    const handleInverseClick = () =>{\n        let newText = function (text) {\n            var s = '';\n            var i = 0;\n            while (i < text.length) \n            {\n                var n = text.charAt(i);\n                if (n === n.toUpperCase()) \n                    n = n.toLowerCase();\n                else\n                    n = n.toUpperCase();\n\n                i += 1;\n                s += n; \n            }\n            return s;\n        };\n        setText(newText);\n        props.showAlert('Converted to InverseCase', \"success\");\n    }\n    const handleCopyClick = () =>{\n        navigator.clipboard.writeText(text);\n        props.showAlert('Copied to Clipboard', \"success\");\n    }\n    const handleExtraSpaces = () =>{\n        let newText = text.split(/[ ]+/);\n        setText(newText.join(\" \"));\n        props.showAlert('Extra spaces removed', \"success\");\n    }\n    const handleOnChange = (event) =>{\n        // console.log(\"On change\");\n        setText(event.target.value)\n    }\n    const [text, setText] = useState('');\n  return (\n    <>\n        <div className=\"container\" style = {{color: props.mode==='dark'?'white':'black'}}>\n            <h1>{props.heading}</h1>\n            <div className=\"mb-3\">\n                <GrammarlyEditorPlugin clientId=\"client_2gCNaMpgQmgkg9MCeJbXXf\">\n                    <textarea className=\"form-control\" value={text} style = {{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode ==='dark'?'white':'black'}} onChange={handleOnChange} id=\"myBox\" rows=\"8\"></textarea>\n                </GrammarlyEditorPlugin>\n                <button disabled = {text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} my-2 mx-1`} onClick={handleClearClick}>Clear Text</button>\n                <button disabled = {text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} my-2 mx-1`} onClick={handleUpClick}>Convert to UpperCase</button>\n                <button disabled = {text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} my-2 mx-1`} onClick={handleLoClick}>Convert to LowerCase</button>\n                <button disabled = {text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} my-2 mx-1`} onClick={handleStartClick}>Convert to StartCase</button>\n                <button disabled = {text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} my-2 mx-1`} onClick={handleInverseClick}>Convert to InverseCase</button>\n                <button disabled = {text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} my-2 mx-1`} onClick={handleCopyClick}>Copy Text</button>\n                <button disabled = {text.length===0} className={`btn btn-${props.mode==='light'?'secondary':'dark'} my-2 mx-1`} onClick={handleExtraSpaces}>Remove Extra Spaces</button>\n            </div>\n        </div>\n        <div className=\"container my-3\" style = {{color: props.mode === 'dark'? 'white' : 'black'}}>\n            <h2>Your text Summary</h2>\n            <p>{text === \"\" ? 0 : text.split(/\\s+/).filter((ele)=>{return ele.length!==0}).length} words and {text.length} characters</p>\n            <p>{0.008 * text.split(\" \").filter((ele)=>{return ele.length!==0}).length} Minutes read</p>\n            <h3>Preview</h3>\n            <p>{text.length > 0 ? text : 'Nothing to Preview'}</p>\n        </div>\n    </>\n    \n  );\n}\n","import React from 'react';\n\nfunction Alert(props) {\n    const capitalize = (word) =>{\n        const lower = word.toLowerCase();\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\n    }\n  return (\n    <div style={{height: '50px'}}>\n        {props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\n        <strong>{capitalize(props.alert.type)}</strong> {props.alert.msg}\n        </div>}\n    </div>\n    \n  );\n}\nexport default Alert;\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import About from './components/About';\n// import { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setalert] = useState(null);\n\n  const showAlert = (message, type)=>{\n    setalert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  };\n\n  const toggleMode = () =>{\n    if(mode === 'dark'){\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert('Light mode has been enabled', \"success\");\n    }\n    else{\n      setMode('dark');\n      document.body.style.backgroundColor = '#5A5A5A';\n      showAlert('Dark mode has been enabled', \"success\");\n    }\n  };\n  return (\n    <>\n      {/* <Router> */}\n        <Navbar title = \"TextUtils\" mode = {mode} toggleMode={toggleMode}/>\n        <Alert alert = {alert}/>\n        <div className=\"container my-3\">\n          {/* <Routes>\n            <Route path=\"/about\" element = {<About/>}/> */}\n            {/* <Route path=\"/\" element={}/>\n          </Routes> */}\n          <TextForm showAlert={showAlert} heading = \"Enter Your text below to analyze\" mode = {mode}/>\n        </div>\n      {/* </Router> */}\n    </>\n  );\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}